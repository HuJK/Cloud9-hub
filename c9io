map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

server {
    # Listen https on port 8443
    listen 8443 ssl;
    listen [::]:8443 ssl;
    ssl_certificate     /etc/nginx_ssl/lab.pem;
    ssl_certificate_key /etc/nginx_ssl/lab.key;
    server_name default_server;

    ssl_stapling_verify on;
    add_header Strict-Transport-Security max-age=15768000;
    set $server_salt "1!2@3=我是鹽";
    # Managing literal requests to the JupyterHub front end
    location / {
        auth_pam "Cloud9 Workspace";
        auth_pam_service_name "auth-common";
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        set $sock_path "http://unix:/etc/c9/sock/c9-${remote_user}.sock";
        set $server_auth_base64 "bm9sb2dpbjpOb3RTZXRZZXQ=";
        rewrite_by_lua_block {
            package.path = package.path .. ";/etc/c9/util/md5.lua"
            if ngx.var.http_authorization and ngx.var.remote_user then
                local md5 = require('md5')
                local tmp = ngx.var.http_authorization
                tmp = tmp:sub(tmp:find(' ')+1)
                tmp = ngx.decode_base64(tmp)
                remote_user     = tmp:sub(0,tmp:find(":")-1)
                remote_password = tmp:sub(tmp:find(':')+1)
                server_auth = remote_user .. ":" .. md5.sumhexa(ngx.var.server_salt .. remote_password)
                ngx.var.server_auth_base64 = ngx.encode_base64( server_auth )
            end
        }
        proxy_set_header Authorization "Basic ${server_auth_base64}";
        proxy_pass $sock_path;
        # websocket headers
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        # if proxy_pass to workspace failed, spawn workspace
        error_page 502 /502-server_conn_err.html;
    }

    location = /502-server_conn_err.html {
        default_type 'text/plain';
        add_header "Content-Type" "text/plain" always;
        content_by_lua_block {
            package.path = package.path .. ";/etc/c9/util/md5.lua"
            local md5 = require 'md5'  
            if ngx.var.http_authorization then
                local tmp = ngx.var.http_authorization
                tmp = tmp:sub(tmp:find(' ')+1)
                tmp = ngx.decode_base64(tmp)
                remote_user     = tmp:sub(0,tmp:find(":")-1)
                remote_password = tmp:sub(tmp:find(':')+1)
                server_auth = remote_user .. ":" .. md5.sumhexa(ngx.var.server_salt .. remote_password)
                spcmd = "unset TMUX ;cp -rn /etc/c9/.c9 $HOME ;rm -f /etc/c9/sock/c9-$USER.sock 2>/dev/null ;tmux new -d -s c9io node /etc/c9/sdk/server.js -p /etc/c9/sock/c9-$USER.sock -a " .. server_auth .. " -w $HOME ;sleep 1 ;chmod 666 /etc/c9/sock/c9-$USER.sock"
                spcmd_by_su = "su " .. remote_user  .. " -c '" .. spcmd .. "'"
                fp = io.popen( spcmd_by_su ,"w")
                fp:write(remote_password)
                fp:close()
                ngx.say("Spawning workspace")
                ngx.say("If server not spawn, try to run this command in comsole:")
                ngx.say("#######################")
                ngx.say(spcmd:gsub(";","\n"))
                ngx.say("#######################")

                ngx.say("\nYou can check Cloud9 workspace status by this command: tmux a -t c9io")
                ngx.say("\nPlease refresh this page. If it's done, you should be able to enter the server.")
            else
                ngx.say("Need auth info!")
            end
        } 
    }
    
    #error_page 401 /401-logout.html;
    location = /401-logout.html {
        auth_pam "Cloud9 Workspace";
        auth_pam_service_name "auth-common";
        try_files DUMMY @return401;
        error_page 401 =200  @return200;
    }
    location @return401 {
        add_header 'WWW-Authenticate' 'Basic Realm="Cloud9 Workspace"' always;
        return 401 '<!DOCTYPE html><html><body><script>setTimeout(function(){document.homepage.submit();},3000);</script><p>Logout. Back to homepage after 3 seconds.</p><form name="homepage" action="/" method="get"></form></body></html>';
    }
    location @return200 {
        return 200 '<!DOCTYPE html><html><body><script>setTimeout(function(){document.homepage.submit();},3000);</script><p>Logout. Back to homepag eafter 3 seconds.</p><form name="homepage" action="/" method="get"></form></body></html>';
    }


    # Managing requests to verify letsencrypt host
    location ~ /.well-known {
        allow all;
    }
}
